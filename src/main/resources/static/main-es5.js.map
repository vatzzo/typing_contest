{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/contest/contest-routing.module.ts","webpack:///src/app/contest/contest.module.ts","webpack:///src/app/contest/tcontest/tcontest.component.ts","webpack:///src/app/contest/tcontest/tcontest.component.html","webpack:///src/app/contest/typingapp.service.ts","webpack:///src/app/words-list/list/list.component.ts","webpack:///src/app/words-list/list/list.component.html","webpack:///src/app/words-list/typingapp.service.ts","webpack:///src/app/words-list/words-list-routing.module.ts","webpack:///src/app/words-list/words-list.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","path","component","ContestRoutingModule","forChild","ContestModule","TContestComponent","typingapp","words","wordsType1","wordsType2","index","iterations","word1","word2","circleState","circle","document","getElementById","style","backgroundColor","transition","hand","querySelector","clockInterval","setInterval","setProperty","toString","alert","value","getWordsList","subscribe","response","forEach","i","indexOf","en","pl","value1","wordInput","getCurrentWord","includes","changeCircleStyle","event","target","resetHandPosition","onImport","onInput","changeHandPosition","TypingappService","http","baseUrl","url","get","providedIn","ListComponent","wordId","inputEnState","inputPlState","parentElement","remove","deleteWord","letters","formBtn","match","length","inputState1","inputState2","iden","wordEn","wordPl","form","setTimeout","Word","addWord","JSON","stringify","node","createElement","textnode","createTextNode","appendChild","color","textAlign","removeChild","content","validateEn","validatePl","word","header","set","post","headers","WordsListRoutingModule","WordsListModule","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  constructor() {\n\n  }\n}\n","<ul class=\"navigation-bar\">\n  <li><a routerLink=\"/contest\">Contest</a></li>\n  <li><a routerLink=\"/words\">Word List</a></li>\n</ul>\n\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ContestModule } from './contest/contest.module';\nimport { WordsListModule } from './words-list/words-list.module';\n\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ContestModule,\n    WordsListModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { TContestComponent } from './tcontest/tcontest.component';\n\n\nconst routes: Routes = [\n  { path: 'contest', component: TContestComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ContestRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n// It makes avaiable to use http requests\nimport { HttpClientModule } from'@angular/common/http'\n\nimport { ContestRoutingModule } from './contest-routing.module';\nimport { TContestComponent } from './tcontest/tcontest.component';\n\n\n@NgModule({\n  declarations: [TContestComponent],\n  imports: [\n    CommonModule,\n    ContestRoutingModule,\n    HttpClientModule\n  ]\n})\nexport class ContestModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { TypingappService } from '../typingapp.service';\nimport { R3TargetBinder } from '@angular/compiler';\n\n\n\n@Component({\n  selector: 'app-tcontest',\n  templateUrl: './tcontest.component.html',\n  styleUrls: ['./tcontest.component.scss']\n})\nexport class TContestComponent implements OnInit {\n\n  // Declaration Of Class Attributes\n  words = [];\n  wordsType1 = [];\n  wordsType2 = [];\n  wordInput: string;\n  currentWord: string;\n  index: number = 0;\n  circleState: boolean;\n  iterations: number = 0;\n\n\n\n  constructor(private typingapp: TypingappService) { }\n\n\n\n  ngOnInit(): void {\n\n  }\n\n   // Words Comparison Function\n   compare(word1: string, word2: string) {\n    if(word1 === word2) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Get Current Word From Comparison List ( wordsType2 )\n  getCurrentWord(index: number) {\n    return this.wordsType2[index];\n  }\n\n  // Circle Events\n    // Change Circle Color Everytime When User Give Some Input\n  changeCircleStyle(circleState: boolean) {\n    const circle = document.getElementById('circle');\n    if(circleState === true) {\n      circle.style.backgroundColor = 'rgb(175, 255, 202)';\n      circle.style.transition = 'background-color 0.4s ease-in';\n    } else if (circleState === false) {\n      circle.style.backgroundColor = 'rgb(255, 175, 202)'\n      circle.style.transition = 'background-color 0.4s esee-in';\n    }\n  }\n\n  // Change Hand Position\n  changeHandPosition() {\n    const hand = document.querySelector('.circle .hand');\n        let clockInterval = setInterval(() => {\n          (<HTMLDivElement>hand).style.setProperty('--rotation', (this.iterations/6 * 360).toString());\n            if(this.iterations==6){\n                alert('Game Over !');\n            }\n            this.iterations++;\n        } , 500);\n  }\n\n  // Reset Hand Position\n  resetHandPosition() {\n    const hand = document.querySelector('.circle .hand');\n    (<HTMLDivElement>hand).style.setProperty('--rotation', '0');\n    this.iterations = 0;\n  }\n\n\n  // Import List\n  onImport(value: number) {\n    this.typingapp.getWordsList().subscribe( (response:any) => {\n      this.words = response;\n\n      // Depending On Chosen Option Set Values Of Comparison List and Displayed List\n      switch (value) {\n        case 1:\n          this.words.forEach(i => { this.wordsType1[this.words.indexOf(i)] = i.en;});\n          this.words.forEach(i => { this.wordsType2[this.words.indexOf(i)] = i.en });\n          break;\n        case 2:\n          this.words.forEach(i => { this.wordsType1[this.words.indexOf(i)] = i.pl });\n          this.words.forEach(i => { this.wordsType2[this.words.indexOf(i)] = i.pl });\n          break;\n        case 3:\n          this.words.forEach(i => { this.wordsType1[this.words.indexOf(i)] = i.en });\n          this.words.forEach(i => { this.wordsType2[this.words.indexOf(i)] = i.pl });\n          break;\n        case 4:\n          this.words.forEach(i => { this.wordsType1[this.words.indexOf(i)] = i.pl });\n          this.words.forEach(i => { this.wordsType2[this.words.indexOf(i)] = i.en });\n          break;\n      }\n\n    });\n\n  }\n\n  // When A User Starts To Type Something In The Input Field\n  onInput(value1: string) {\n    this.wordInput = value1;\n\n    if(this.getCurrentWord(this.index).includes(this.wordInput)) {\n      this.circleState = true;\n      this.changeCircleStyle(this.circleState);\n    } else {\n      this.circleState = false;\n      this.changeCircleStyle(this.circleState);\n    }\n\n    if(this.wordInput === this.getCurrentWord(this.index)){\n      // Increment Index\n      this.index++;\n      // Clear field\n      (<HTMLInputElement>event.target).value = \"\";\n      this.resetHandPosition();\n\n    }\n  }\n\n\n\n\n}\n","<nav>\n        <ul class=\"word-list\" >\n            <li class=\"liEl\" [style.transform]=\"'translateX(calc(-'+ index +'*100%))'\">.</li>\n            <li class=\"liEl\" [style.transform]=\"'translateX(calc(-'+ index +'*100%))'\">.</li>\n\n            <!-- For Each Element Display Word On Navigation Bar  -->\n            <li class=\"liEl\" [style.transform]=\"'translateX(calc(-'+ index +'*100%))'\" *ngFor=\"let word of words; index as i\"> {{ this.wordsType1[i] }}</li>\n        </ul>\n    \n     <div class=\"pointer\"></div>\n</nav>\n\n<!-- Choose A Proper List Everytime A User Clicks An Option Button -->\n<button class=\"option-btn\" (click)=\"onImport(1)\">EN</button>\n<button class=\"option-btn\" (click)=\"onImport(2)\">PL</button>\n<button class=\"option-btn\" (click)=\"onImport(3)\">EN / PL</button>\n<button class=\"option-btn\" (click)=\"onImport(4)\">PL / EN</button>\n\n<section id=\"section-one\">\n     <div id=\"circle\" class=\"circle\">\n         <div class=\"hand\" id=\"hand\"></div>\n         <div class=\"number number1\">1</div>\n         <div class=\"number number2\">2</div>\n         <div class=\"number number3\">3</div>\n         <div class=\"number number4\">4</div>\n         <div class=\"number number5\">5</div>\n         <div class=\"number number6\">6</div>\n     </div>\n\n     <!-- Functions Which Check And Compare User Values To Current Word and To Controll Animation on Circle -->\n     <input (keyup)=\"onInput($event.target.value)\" (click)=\"changeHandPosition()\" type=\"text\" class=\"text-field\" id=\"text-field\" placeholder=\"Enter the word...\">\n</section>\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from \"../../environments/environment\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TypingappService {\n  baseUrl = environment.baseUrl;\n\n  constructor(private http: HttpClient) { }\n\n  public getWordsList() {\n\n    // Request Of Type Get That Is Used In .ts File To Upload List Of Words From Database\n    let url = this.baseUrl + '/words';\n    return this.http.get(url);\n  }\n}\n","import { Component, OnInit, ɵɵresolveBody } from '@angular/core';\nimport { TypingappService } from '../typingapp.service';\n\n@Component({\n  selector: 'app-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.scss']\n})\nexport class ListComponent implements OnInit {\n  words = [];\n  wordId : string = \"\";\n  inputEnState: boolean = false;\n  inputPlState: boolean = false;\n\n  constructor(private typingapp: TypingappService) { }\n\n  ngOnInit(): void {\n  }\n\n   // Import List\n  onImport() {\n    this.typingapp.getWordsList().subscribe( (response:any) => { this.words = response });\n  }\n\n  // Remove Element\n  removeElement(e: any, id: number) {\n    // Remove Element From UI\n    e.target.parentElement.remove();\n\n    // Remove Element From Db\n    this.typingapp.deleteWord(id).subscribe();\n\n  }\n\n  // Validate Inputs\n  validateEn(value: string) {\n    let letters = /^[A-Za-z]+$/;\n    const formBtn = document.querySelector(\".form-button\");\n    if(value.match(letters) && value !== \"\" && value.length > 2) {\n      this.inputEnState = true;\n    } else {\n      this.inputEnState = false;\n    }\n  }\n\n  validatePl(value: string) {\n    let letters = /^[A-Za-z]+$/;\n    if(value.match(letters) && value !== \"\" && value.length > 2) {\n      this.inputPlState = true;\n    } else {\n      this.inputPlState = false;\n    }\n  }\n\n  // Add Element\n  addWord(inputState1 = this.inputEnState, inputState2=this.inputPlState, iden: string = this.wordId) {\n    const formBtn = document.querySelector(\".form-button\");\n    const wordEn = document.querySelector(\".word-en\");\n    const wordPl = document.querySelector(\".word-pl\");\n    const form = document.querySelector(\".word-form\");\n    if(inputState1 === true && inputState2 === true) {\n      this.inputEnState = false;\n      this.inputPlState = false;\n\n      (<HTMLButtonElement>formBtn).style.backgroundColor = '#71ee9b';\n      setTimeout(() => { (<HTMLButtonElement>formBtn).style.backgroundColor = '#4a4181'; }, 500);\n\n      // If Everything Is Okay Make An JSON Array\n      let Word = {\n        id : iden,\n        pl: ((<HTMLInputElement>wordPl).value).toString(),\n        en: ((<HTMLInputElement>wordEn).value).toString()\n      }\n\n      // Use Post Method To Add A New Record\n      this.wordId = \"\";\n      (<HTMLInputElement>wordEn).value = \"\";\n      (<HTMLInputElement>wordPl).value = \"\";\n      this.typingapp.addWord(JSON.stringify(Word)).subscribe();\n\n    } else {\n      (<HTMLButtonElement>formBtn).style.backgroundColor = 'red';\n      setTimeout(() => { (<HTMLButtonElement>formBtn).style.backgroundColor = '#4a4181'; }, 2000);\n\n      // If Something Went Wrong Display A Custom Alert\n      let node = document.createElement(\"p\");\n      let textnode = document.createTextNode(\"Both words must have more than 2 characters and contain letters only.\");\n      node.appendChild(textnode);\n      node.style.color = \"red\";\n      node.style.textAlign = \"center\";\n      form.appendChild(node);\n\n      // Remove An Alert After 2 Seconds\n      setTimeout(() => { form.removeChild(node) }, 2000);\n    }\n  }\n\n  //  Put The Words To Be Modified In The Fields\n  onLiClick(e: any, id: number) {\n    this.typingapp.getWordsList(id.toString()).subscribe( response => {\n      let content: any = response;\n      const wordEn = document.querySelector(\".word-en\");\n      const wordPl = document.querySelector(\".word-pl\");\n      (<HTMLInputElement>wordEn).value = content.en;\n      (<HTMLInputElement>wordPl).value = content.pl;\n      this.wordId = content.id;\n    } )\n  }\n}\n","<!-- After Clicking A List Of Words Is Going To Be Imported -->\r\n<button (click)=\"onImport()\">Import Words</button>\r\n\r\n<div class=\"underline\"></div>\r\n\r\n<ul class=\"words-list\">\r\n\r\n    <!-- Displaying Subsequent Words In English And Polish Language -->\r\n    <!-- Also Creating An Element That Will Be Responsible For Removing Particular Records From DB -->\r\n    <!-- After Clicking On Li Element, Words From That Li Element Will Be Uploaded To Add Word Inputs  -->\r\n    <li *ngFor=\"let word of words; index as i\"> <span class=\"box\" (click)=\"onLiClick($event.target.value, words[i].id)\"> {{ words[i].en }} , {{ words[i].pl }} </span> <button class=\"remove\" (click)=\"removeElement($event, words[i].id)\">X</button></li>\r\n</ul>\r\n\r\n<div class=\"word-form\">\r\n\r\n    <!-- Addition Of New Words -->\r\n    <button class=\"form-button\" (click)=\"addWord()\">Add Word</button>\r\n    <div class=\"underline\"></div>\r\n    <label>Word In English</label>\r\n\r\n    <!-- Validation Function Usage -->\r\n    <input (keyup)=\"validateEn($event.target.value)\" class=\"word-en\" type=\"text\" placeholder=\"Write down word in English\"/>\r\n    <label>Word In Polish</label>\r\n\r\n    <!-- Validation Function Usage -->\r\n    <input (keyup)=\"validatePl($event.target.value)\"  class=\"word-pl\" type=\"text\" placeholder=\"Write down word in Polish\"/>\r\n</div>\r\n\r\n<div class=\"here\">\r\n\r\n</div>\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment} from \"../../environments/environment\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TypingappService {\n  baseUrl = environment.baseUrl;\n\n  constructor(private http: HttpClient) { }\n\n  public getWordsList(id: string = \"\") {\n    let url = this.baseUrl + '/words/';\n    // Request Of Type Get That Is Used In .ts File To Upload List Of Words From Database\n    return this.http.get(url + id);\n  }\n\n    // Request Of Type Delete That Is Used In .ts File To Delete A Record In Database\n  public deleteWord(id: number) {\n    let url = this.baseUrl + '/words/';\n    return this.http.delete(url + id.toString());\n  }\n\n    // Request Of Type Delete That Is Used In .ts File To Add A Record In Database\n  public addWord(word: string) {\n    let url = this.baseUrl + '/words/';\n    const header = new HttpHeaders().set('Content-Type', 'application/json');\n    return this.http.post(url, word, {headers: header});\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ListComponent } from './list/list.component';\n\n\nconst routes: Routes = [\n  { path: 'words', component: ListComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class WordsListRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n// It makes avaiable to use http requests\nimport { HttpClientModule } from'@angular/common/http'\n\nimport { WordsListRoutingModule } from './words-list-routing.module';\nimport { ListComponent } from './list/list.component';\n\n\n\n\n@NgModule({\n  declarations: [ListComponent],\n  imports: [\n    CommonModule,\n    WordsListRoutingModule,\n    HttpClientModule\n  ]\n})\nexport class WordsListModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  baseUrl: 'http://localhost:8081/typing_contest-0.0.0'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}